# Generated by Django 4.0 on 2021-12-10 03:06

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('pkid', models.BigAutoField(editable=False, help_text='Actual primary key', primary_key=True, serialize=False, verbose_name='primary Key')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for each instance. Used in Foreign Keys and in apis', unique=True, verbose_name='unique id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation time of the object. Automatically set at the time of creation.', verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Updated everytime any model field is updated.', verbose_name='last update time')),
                ('is_active', models.BooleanField(default=True, help_text='Used to implement soft delete. If false, then object is considered deleted.', verbose_name='is active')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. A valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_verified', models.BooleanField(default=False, help_text='Email verification status.', verbose_name='verified')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who first creates this instance. This can be null.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='authentication.user', to_field='uuid', verbose_name='created by')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated the instance.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='authentication.user', to_field='uuid', verbose_name='modified by')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
